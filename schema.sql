-- Create USER table
CREATE TABLE "USER" (
    PK_USER_ID SERIAL PRIMARY KEY,
    FIRSTNAME VARCHAR(255) NOT NULL,
    MIDDLENAME VARCHAR(255),
    LASTNAME VARCHAR(255) NOT NULL,
    USERNAME VARCHAR(255) NOT NULL,
    PASSWORD VARCHAR(255) NOT NULL,
    EMAIL VARCHAR(255) NOT NULL UNIQUE,
    ROLE VARCHAR(50) CHECK (ROLE IN ('Admin', 'Staff', 'Guest'))
);

-- Create ROOM table
CREATE TABLE ROOM (
    PK_ROOM_ID SERIAL PRIMARY KEY,
    ROOM_TYPE VARCHAR(50) CHECK (ROOM_TYPE IN ('Single', 'Double', 'Suite', 'Deluxe')),
    STATUS VARCHAR(50) CHECK (STATUS IN ('Available', 'Occupied', 'Maintenance', 'Cleaning')),
    PRICE DECIMAL(10,2) NOT NULL
);

-- Create SERVICE table
CREATE TABLE SERVICE (
    PK_SERVICE_ID SERIAL PRIMARY KEY,
    FK_USER_ID INTEGER,
    SERVICE_TYPE VARCHAR(50) CHECK (SERVICE_TYPE IN ('Room Service', 'Laundry', 'Spa', 'Transport', 'Food')),
    STATUS VARCHAR(50) CHECK (STATUS IN ('Requested', 'In Progress', 'Completed', 'Cancelled')),
    CONSTRAINT FK_SERVICE_USER FOREIGN KEY (FK_USER_ID) REFERENCES "USER"(PK_USER_ID)
);

-- Create BOOKING table
CREATE TABLE BOOKING (
    PK_BOOKING_ID SERIAL PRIMARY KEY,
    FK_USER_ID INTEGER NOT NULL,
    FK_ROOM_ID INTEGER NOT NULL,
    FK_SERVICE_ID INTEGER,
    CHECK_IN TIMESTAMP NOT NULL,
    CHECK_OUT TIMESTAMP,
    CONSTRAINT FK_BOOKING_USER FOREIGN KEY (FK_USER_ID) REFERENCES "USER"(PK_USER_ID),
    CONSTRAINT FK_BOOKING_ROOM FOREIGN KEY (FK_ROOM_ID) REFERENCES ROOM(PK_ROOM_ID),
    CONSTRAINT FK_BOOKING_SERVICE FOREIGN KEY (FK_SERVICE_ID) REFERENCES SERVICE(PK_SERVICE_ID)
);

-- Create PAYMENT table
CREATE TABLE PAYMENT (
    PK_PAYMENT_ID SERIAL PRIMARY KEY,
    FK_USER_ID INTEGER NOT NULL,
    AMOUNT DECIMAL(10,2) NOT NULL,
    PAYMENT_METHOD VARCHAR(50) CHECK (PAYMENT_METHOD IN ('Cash', 'Credit Card', 'Debit Card', 'Online')),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    LINE_TOTAL DECIMAL(10,2),
    CONSTRAINT FK_PAYMENT_USER FOREIGN KEY (FK_USER_ID) REFERENCES "USER"(PK_USER_ID)
);

-- Create INVOICE table
CREATE TABLE INVOICE (
    PK_INVOICE_ID SERIAL PRIMARY KEY,
    FK_PAYMENT_ID INTEGER NOT NULL,
    TOTAL_AMOUNT DECIMAL(10,2) NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_INVOICE_PAYMENT FOREIGN KEY (FK_PAYMENT_ID) REFERENCES PAYMENT(PK_PAYMENT_ID)
);

-- Create HOUSEKEEPING table
CREATE TABLE HOUSE_KEEPING (
    PK_HOUSEKEEPING_ID SERIAL PRIMARY KEY,
    FK_ROOM_ID INTEGER NOT NULL,
    FK_STAFF_ID INTEGER NOT NULL,
    STATUS VARCHAR(50) CHECK (STATUS IN ('Pending', 'In Progress', 'Completed')),
    CONSTRAINT FK_HOUSEKEEPING_ROOM FOREIGN KEY (FK_ROOM_ID) REFERENCES ROOM(PK_ROOM_ID),
    CONSTRAINT FK_HOUSEKEEPING_STAFF FOREIGN KEY (FK_STAFF_ID) REFERENCES "USER"(PK_USER_ID)
);

-- Create MAINTENANCE table
CREATE TABLE MAINTENANCE (
    PK_MAINTENANCE_ID SERIAL PRIMARY KEY,
    FK_ROOM_ID INTEGER NOT NULL,
    FK_STAFF_ID INTEGER NOT NULL,
    ISSUE VARCHAR(255) NOT NULL,
    STATUS VARCHAR(50) CHECK (STATUS IN ('Pending', 'In Progress', 'Completed')),
    CONSTRAINT FK_MAINTENANCE_ROOM FOREIGN KEY (FK_ROOM_ID) REFERENCES ROOM(PK_ROOM_ID),
    CONSTRAINT FK_MAINTENANCE_STAFF FOREIGN KEY (FK_STAFF_ID) REFERENCES "USER"(PK_USER_ID)
);

-- Adding indexes to improve query performance
CREATE INDEX IDX_ROOM_STATUS ON ROOM(STATUS);
CREATE INDEX IDX_BOOKING_DATES ON BOOKING(CHECK_IN, CHECK_OUT);
CREATE INDEX IDX_PAYMENT_USER ON PAYMENT(FK_USER_ID);
CREATE INDEX IDX_SERVICE_STATUS ON SERVICE(STATUS); 