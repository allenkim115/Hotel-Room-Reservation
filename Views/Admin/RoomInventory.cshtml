@model WebApplication1.Models.BaseViewModel
@{
    ViewData["Title"] = "Rooms";
    Layout = "_AdminLayout";
}

<div class="page-header mb-4">
    <h2 class="text-primary">Rooms Management</h2>
    <p class="text-muted">Manage hotel rooms - add, edit, or remove rooms from the system.</p>
</div>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f8f9fa;
        }

        .page-header {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            padding: 2rem;
            border-radius: 15px;
            margin-bottom: 2rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }

        .page-header h2 {
            color: #2c3e50;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .page-header p {
            color: #6c757d;
            font-size: 1.1rem;
        }

        .room-card {
            background-color: white;
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 25px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.08);
            transition: all 0.3s ease;
            border: 1px solid #e9ecef;
            position: relative;
            overflow: hidden;
        }

        .room-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 4px;
            background: linear-gradient(90deg, #800000, #8B0000);
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .room-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        }

        .room-card:hover::before {
            opacity: 1;
        }

        .room-status {
            padding: 8px 16px;
            border-radius: 25px;
            font-size: 0.85rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .status-available { 
            background: linear-gradient(135deg, #800000 0%, #8B0000 100%);
            color: white;
        }
        .status-occupied { 
            background: linear-gradient(135deg, #A52A2A 0%, #8B0000 100%);
            color: white;
        }
        .status-maintenance { 
            background: linear-gradient(135deg, #ffc107 0%, #ffca2c 100%);
            color: black;
        }

        .room-amenities {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-top: 15px;
        }

        .amenity-badge {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            padding: 8px 16px;
            border-radius: 25px;
            font-size: 0.85rem;
            color: #495057;
            transition: all 0.3s ease;
            border: 1px solid rgba(0,0,0,0.05);
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .amenity-badge:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

        .amenity-badge i {
            color: #800000;
        }

        .room-type-header {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            padding: 25px;
            margin-bottom: 30px;
            border-radius: 15px;
            border-left: 5px solid #800000;
            box-shadow: 0 4px 15px rgba(0,0,0,0.08);
            position: relative;
            transition: all 0.3s ease;
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
        }

        .room-type-header:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0,0,0,0.1);
        }

        .room-type-actions {
            margin-left: 20px;
            flex-shrink: 0;
        }

        .room-type-content {
            flex-grow: 1;
            margin-right: 20px;
        }

        .btn-modify {
            padding: 10px 20px;
            border-radius: 25px;
            font-weight: 500;
            background: linear-gradient(135deg, #800000 0%, #8B0000 100%);
            border: none;
            color: white;
            box-shadow: 0 4px 15px rgba(108, 117, 125, 0.2);
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .btn-modify:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(108, 117, 125, 0.3);
            color: white;
        }

        .room-type-header h4 {
            color: #800000;
            margin-bottom: 10px;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .room-type-header p {
            color: #6c757d;
            font-size: 1rem;
            margin-bottom: 0;
            line-height: 1.5;
        }

        .btn-add-room-type {
            padding: 12px 24px;
            border-radius: 25px;
            font-weight: 600;
            background: linear-gradient(135deg, #800000 0%, #8B0000 100%);
            border: none;
            color: white;
            box-shadow: 0 4px 15px rgba(13, 110, 253, 0.2);
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .btn-add-room-type:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(13, 110, 253, 0.3);
            color: white;
        }

        .room-details {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            padding: 15px;
            border-radius: 12px;
            margin: 15px 0;
            border: 1px solid rgba(0,0,0,0.05);
        }

        .room-details p {
            margin-bottom: 10px;
            color: #495057;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .room-details i {
            color: #800000;
            width: 20px;
            font-size: 1.1rem;
        }

        .action-buttons {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }

        .btn-action {
            padding: 10px 20px;
            border-radius: 10px;
            transition: all 0.3s ease;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .btn-action:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

        /* Modal Styles */
        .modal-content {
            border-radius: 15px;
            border: none;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }

        .modal-header {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border-radius: 15px 15px 0 0;
            padding: 1.5rem;
        }

        .modal-title {
            color: #2c3e50;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .modal-body {
            padding: 1.5rem;
        }

        .form-label {
            font-weight: 500;
            color: #495057;
            margin-bottom: 0.5rem;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .form-control, .form-select {
            border-radius: 10px;
            padding: 0.75rem 1rem;
            border: 1px solid #dee2e6;
            transition: all 0.3s ease;
        }

        .form-control:focus, .form-select:focus {
            border-color: #800000;
            box-shadow: 0 0 0 0.2rem rgba(128, 0, 0, 0.15);
        }

        .modal-footer {
            padding: 1.5rem;
            border-top: 1px solid #e9ecef;
        }

        .modal-footer .btn {
            padding: 0.75rem 1.5rem;
            border-radius: 10px;
            font-weight: 500;
        }

        /* Grid Layout */
        #roomsGrid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
            gap: 32px;
            justify-content: center;
            margin-top: 16px;
            margin-bottom: 32px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        .room-type-section {
            max-width: 700px;
            margin: 0 auto 32px auto;
        }
        .room-type-header {
            border-radius: 15px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.08);
            padding: 25px;
            margin-bottom: 24px;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border-left: 5px solid #800000;
        }
        .room-card {
            max-width: 350px;
            margin: 0 auto 24px auto;
        }
        .row.mb-4 {
            margin-left: 0;
            margin-right: 0;
            justify-content: flex-start;
        }
        .col-md-4.text-end {
            display: flex;
            justify-content: flex-start;
            margin-bottom: 0;
            padding-left: 0;
        }
        .btn-add-room-type {
            margin-bottom: 0;
            margin-left: 0;
        }
        .page-header {
            margin-bottom: 32px;
        }
        @@media (max-width: 1200px) {
            #roomsGrid {
                grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            }
        }
        @@media (max-width: 768px) {
            .container {
                max-width: 98vw;
                padding: 0 8px;
            }
            #roomsGrid {
                grid-template-columns: 1fr;
                gap: 20px;
            }
            .room-type-section {
                max-width: 98vw;
            }
            .room-card {
                max-width: 98vw;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="row mb-4">
            <div class="col-md-4 text-end">
                <button class="btn btn-add-room-type" data-bs-toggle="modal" data-bs-target="#addRoomTypeModal">
                    <i class="fas fa-plus me-2"></i>Add Room
                </button>
            </div>
        </div>

        <div id="roomsGrid">
            @foreach (var roomType in Model.RoomTypes)
            {
                <div class="room-type-section mb-4">
                    <div class="room-type-header">
                        <div class="room-type-content">
                            <h4><i class="fas fa-door-open me-2"></i>@roomType.Name</h4>
                            <p class="mb-0">@roomType.Description</p>
                        </div>
                        <div class="room-type-actions">
                            <button class="btn btn-modify" onclick="openRoomTypeModal(@roomType.Id)">
                                <i class="fas fa-cog me-1"></i>Modify
                            </button>
                        </div>
                    </div>
                    <div class="row">
                        @foreach (var room in Model.Rooms.Where(r => r.RoomType == roomType.Name))
                        {
                            <div class="col-md-4">
                                <div class="room-card">
                                    <div class="d-flex justify-content-between align-items-start">
                                        <div>
                                            <h5 class="mb-1">Room @room.RoomNumber</h5>
                                            <p class="text-muted mb-2"><i class="fas fa-building me-2"></i>Floor: @room.Floor</p>
                                        </div>
                                        <span class="room-status status-@room.Status.ToString().ToLower()">@room.Status</span>
                                    </div>
                                    <div class="room-details">
                                        <p class="mb-2"><i class="fas fa-users me-2"></i>@room.Capacity Adults</p>
                                        <p class="mb-0"><i class="fas fa-dollar-sign me-2"></i>$@room.PricePerNight/night</p>
                                    </div>
                                    <div class="room-amenities">
                                        @if (!string.IsNullOrEmpty(room.Features))
                                        {
                                            foreach (var feature in room.Features.Split(','))
                                            {
                                                <span class="amenity-badge"><i class="fas fa-check me-1"></i>@feature.Trim()</span>
                                            }
                                        }
                                    </div>
                                    <div class="mt-3 action-buttons">
                                        <button class="btn btn-outline-primary btn-action" onclick="editRoom(@room.Id)">
                                            <i class="fas fa-edit me-1"></i>Edit
                                        </button>
                                        <button class="btn btn-outline-danger btn-action" onclick="deleteRoom(@room.Id)">
                                            <i class="fas fa-trash me-1"></i>Delete
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- Add Room Type Modal -->
    <div class="modal fade" id="addRoomTypeModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="fas fa-plus-circle me-2"></i>Add New Room Type</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="addRoomTypeForm" asp-action="AddRoomType" asp-controller="Admin" method="post">
                        <div class="mb-3">
                            <label class="form-label"><i class="fas fa-door-open me-2"></i>Room Type Name</label>
                            <input type="text" class="form-control" name="Name" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label"><i class="fas fa-align-left me-2"></i>Description</label>
                            <textarea class="form-control" name="Description" rows="3" required></textarea>
                        </div>
                        <div class="mb-3">
                            <label class="form-label"><i class="fas fa-dollar-sign me-2"></i>Price per Night</label>
                            <input type="number" class="form-control" name="PricePerNight" step="0.01" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label"><i class="fas fa-bed me-2"></i>Bed Type</label>
                            <input type="text" class="form-control" name="BedType" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label"><i class="fas fa-users me-2"></i>Max Occupancy</label>
                            <input type="number" class="form-control" name="MaxOccupancy" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label"><i class="fas fa-ruler-combined me-2"></i>Room Size (sq ft)</label>
                            <input type="number" class="form-control" name="Size" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label"><i class="fas fa-image me-2"></i>Image URL</label>
                            <input type="url" class="form-control" name="ImageUrl" placeholder="https://example.com/image.jpg">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-success" onclick="saveNewRoomType()">Add Room Type</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Room Type Modal -->
    <div class="modal fade" id="roomTypeModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="fas fa-edit me-2"></i>Edit Room Type</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="roomTypeForm">
                        <input type="hidden" id="roomTypeId" name="Id">
                        <div class="mb-3">
                            <label class="form-label">Room Type Name</label>
                            <input type="text" class="form-control" id="roomTypeName" name="Name" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Description</label>
                            <textarea class="form-control" id="roomTypeDescription" name="Description" rows="3" required></textarea>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Price per Night</label>
                            <input type="number" class="form-control" id="roomTypePrice" name="PricePerNight" step="0.01" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Bed Type</label>
                            <input type="text" class="form-control" id="roomTypeBed" name="BedType" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Max Occupancy</label>
                            <input type="number" class="form-control" id="roomTypeOccupancy" name="MaxOccupancy" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Room Size (sq ft)</label>
                            <input type="number" class="form-control" id="roomTypeSize" name="Size" required>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" onclick="deleteRoomType()">Delete</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-success" onclick="saveRoomType()">Save Changes</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script>
        function filterRooms(status) {
            const rooms = document.querySelectorAll('.room-card');
            const buttons = document.querySelectorAll('.btn-filter');
            
            // Update active button
            buttons.forEach(btn => {
                btn.classList.remove('active');
                if (btn.textContent.toLowerCase().includes(status)) {
                    btn.classList.add('active');
                }
            });

            // Filter rooms
            rooms.forEach(room => {
                const roomStatus = room.querySelector('.room-status').textContent.toLowerCase();
                if (status === 'all' || roomStatus === status) {
                    room.closest('.col-md-4').style.display = 'block';
                } else {
                    room.closest('.col-md-4').style.display = 'none';
                }
            });
        }

        function editRoom(roomId) {
            window.location.href = `/Admin/EditRoom/${roomId}`;
        }

        function deleteRoom(roomId) {
            if (confirm('Are you sure you want to delete this room?')) {
                fetch(`/Admin/DeleteRoom/${roomId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        alert('Failed to delete room: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while deleting the room');
                });
            }
        }

        function openRoomTypeModal(roomTypeId) {
            // Fetch room type data
            fetch(`/Admin/GetRoomType/${roomTypeId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const roomType = data.roomType;
                        document.getElementById('roomTypeId').value = roomType.id;
                        document.getElementById('roomTypeName').value = roomType.name;
                        document.getElementById('roomTypeDescription').value = roomType.description;
                        document.getElementById('roomTypePrice').value = roomType.pricePerNight;
                        document.getElementById('roomTypeBed').value = roomType.bedType;
                        document.getElementById('roomTypeOccupancy').value = roomType.maxOccupancy;
                        document.getElementById('roomTypeSize').value = roomType.size;
                        
                        // Show modal
                        new bootstrap.Modal(document.getElementById('roomTypeModal')).show();
                    } else {
                        alert('Failed to load room type data: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while loading room type data');
                });
        }

        function saveRoomType() {
            const form = document.getElementById('roomTypeForm');
            const formData = new FormData(form);

            fetch('/Admin/UpdateRoomType', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert('Failed to update room type: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while updating the room type');
            });
        }

        function deleteRoomType() {
            const roomTypeId = document.getElementById('roomTypeId').value;
            
            if (confirm('Are you sure you want to delete this room type? This will also delete all rooms of this type.')) {
                fetch(`/Admin/DeleteRoomType/${roomTypeId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        alert('Failed to delete room type: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while deleting the room type');
                });
            }
        }

        function saveNewRoomType() {
            const form = document.getElementById('addRoomTypeForm');
            const formData = new FormData(form);

            fetch('/Admin/AddRoomType', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert('Failed to add room type: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred while adding the room type');
            });
        }
    </script>
</body>
</html> 