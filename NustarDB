-- Create USER table
CREATE TABLE [USER] (
    PK_USER_ID INT PRIMARY KEY IDENTITY(1,1),
    FIRSTNAME VARCHAR(255) NOT NULL,
    MIDDLENAME VARCHAR(255) NULL,
    LASTNAME VARCHAR(255) NOT NULL,
    USERNAME VARCHAR(255) NOT NULL,
    PASSWORD VARCHAR(255) NOT NULL,
    EMAIL VARCHAR(255) NOT NULL UNIQUE,
    ROLE NVARCHAR(50) CHECK (ROLE IN ('Admin', 'Staff', 'Guest'))
);


-- Create ROOM table
CREATE TABLE ROOM (
    PK_ROOM_ID INT PRIMARY KEY IDENTITY(1,1),
    ROOM_TYPE NVARCHAR(50) CHECK (ROOM_TYPE IN ('Single', 'Double', 'Suite', 'Deluxe')),
    STATUS NVARCHAR(50) CHECK (STATUS IN ('Available', 'Occupied', 'Maintenance', 'Cleaning')),
    PRICE MONEY NOT NULL
);

-- Create SERVICE table (removed GUEST FK, replaced with USER FK)
CREATE TABLE SERVICE (
    PK_SERVICE_ID INT PRIMARY KEY IDENTITY(1,1),
    FK_USER_ID INT,  -- Changed GUEST_ID to USER_ID
    SERVICE_TYPE NVARCHAR(50) CHECK (SERVICE_TYPE IN ('Room Service', 'Laundry', 'Spa', 'Transport', 'Food')),
    STATUS NVARCHAR(50) CHECK (STATUS IN ('Requested', 'In Progress', 'Completed', 'Cancelled')),
    CONSTRAINT FK_SERVICE_USER FOREIGN KEY (FK_USER_ID) REFERENCES [USER](PK_USER_ID)
);

-- Create BOOKING table (removed GUEST FK, replaced with USER FK)
CREATE TABLE BOOKING (
    PK_BOOKING_ID INT PRIMARY KEY IDENTITY(1,1),
    FK_USER_ID INT NOT NULL,  -- Changed GUEST_ID to USER_ID
    FK_ROOM_ID INT NOT NULL,
    FK_SERVICE_ID INT,
    CHECK_IN DATETIME NOT NULL,
    CHECK_OUT DATETIME,
    CONSTRAINT FK_BOOKING_USER FOREIGN KEY (FK_USER_ID) REFERENCES [USER](PK_USER_ID),
    CONSTRAINT FK_BOOKING_ROOM FOREIGN KEY (FK_ROOM_ID) REFERENCES ROOM(PK_ROOM_ID),
    CONSTRAINT FK_BOOKING_SERVICE FOREIGN KEY (FK_SERVICE_ID) REFERENCES SERVICE(PK_SERVICE_ID)
);

-- Create PAYMENT table (removed GUEST FK, replaced with USER FK)
CREATE TABLE PAYMENT (
    PK_PAYMENT_ID INT PRIMARY KEY IDENTITY(1,1),
    FK_USER_ID INT NOT NULL,  -- Changed GUEST_ID to USER_ID
    AMOUNT MONEY NOT NULL,
    PAYMENT_METHOD NVARCHAR(50) CHECK (PAYMENT_METHOD IN ('Cash', 'Credit Card', 'Debit Card', 'Online')),
    CREATED_AT DATETIME DEFAULT GETDATE(),
    LINE_TOTAL MONEY,
    CONSTRAINT FK_PAYMENT_USER FOREIGN KEY (FK_USER_ID) REFERENCES [USER](PK_USER_ID)
);

-- Create INVOICE table (no change in this table since it references PAYMENT)
CREATE TABLE INVOICE (
    PK_INVOICE_ID INT PRIMARY KEY IDENTITY(1,1),
    FK_PAYMENT_ID INT NOT NULL,
    TOTAL_AMOUNT MONEY NOT NULL,
    CREATED_AT DATETIME DEFAULT GETDATE(),
    CONSTRAINT FK_INVOICE_PAYMENT FOREIGN KEY (FK_PAYMENT_ID) REFERENCES PAYMENT(PK_PAYMENT_ID)
);

-- Create HOUSEKEEPING table
CREATE TABLE HOUSE_KEEPING (
    PK_HOUSEKEEPING_ID INT PRIMARY KEY IDENTITY(1,1),
    FK_ROOM_ID INT NOT NULL,
    FK_STAFF_ID INT NOT NULL,
    STATUS NVARCHAR(50) CHECK (STATUS IN ('Pending', 'In Progress', 'Completed')),
    CONSTRAINT FK_HOUSEKEEPING_ROOM FOREIGN KEY (FK_ROOM_ID) REFERENCES ROOM(PK_ROOM_ID),
    CONSTRAINT FK_HOUSEKEEPING_STAFF FOREIGN KEY (FK_STAFF_ID) REFERENCES [USER](PK_USER_ID)  -- Changed STAFF to USER
);

-- Create MAINTENANCE table
CREATE TABLE MAINTENANCE (
    PK_MAINTENANCE_ID INT PRIMARY KEY IDENTITY(1,1),
    FK_ROOM_ID INT NOT NULL,
    FK_STAFF_ID INT NOT NULL,
    ISSUE VARCHAR(255) NOT NULL,
    STATUS NVARCHAR(50) CHECK (STATUS IN ('Pending', 'In Progress', 'Completed')),
    CONSTRAINT FK_MAINTENANCE_ROOM FOREIGN KEY (FK_ROOM_ID) REFERENCES ROOM(PK_ROOM_ID),
    CONSTRAINT FK_MAINTENANCE_STAFF FOREIGN KEY (FK_STAFF_ID) REFERENCES [USER](PK_USER_ID)  -- Changed STAFF to USER
);

-- Adding indexes to improve query performance
CREATE INDEX IDX_ROOM_STATUS ON ROOM(STATUS);
CREATE INDEX IDX_BOOKING_DATES ON BOOKING(CHECK_IN, CHECK_OUT);
CREATE INDEX IDX_PAYMENT_USER ON PAYMENT(FK_USER_ID);
CREATE INDEX IDX_SERVICE_STATUS ON SERVICE(STATUS);
